name: Package

on:
  workflow_dispatch:
    inputs:
        version:
          description: "The version to release (eg: 'v1.0.0')"
          required: true
          type: string
        build-unpacked:
          description: "Create unpacked artifact?"
          required: true
          type: boolean
          default: true
        build-installer:
          description: "Create installer artifact?"
          required: true
          type: boolean
          default: true
        deploy-epic:
          description: "Deploy to Epic?"
          required: false
          type: boolean
          default: false
        release-draft:
          description: "Create a draft release?"
          required: false
          type: boolean
          default: true

jobs:      
  build:
    runs-on: windows-latest
    env:
      ES_USERNAME: ${{ secrets.ES_USERNAME }}
      ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
      ES_CREDENTIAL_ID: ${{ secrets.ES_CREDENTIAL_ID }}
      ES_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true # Allows AddPAth and SetEnv commands
      
    strategy:
      matrix:
        dotnet-version: [ 6.0.x ]

    steps:
      - name: Set Outputs
        id: setOutputs
        shell: pwsh
        env:
          InputVersion: ${{ inputs.version }}
        run: |
          $tagVersion = $env:InputVersion.StartsWith('v') ? $env:InputVersion : "v" + $env:InputVersion
          $rawVersion = $env:InputVersion.StartsWith('v') ? $env:InputVersion.Substring(1) : $env:InputVersion
          $validation = [System.Version]::Parse($rawVersion)
          $runNumber = ${GITHUB_RUN_NUMBER}
          echo "tagVersion=$tagVersion" >> $env:GITHUB_OUTPUT
          echo "rawVersion=$rawVersion" >> $env:GITHUB_OUTPUT
          echo "artifactNameUnpacked=vortex-setup-$rawVersion-unpacked" >> $env:GITHUB_OUTPUT
          echo "artifactNameInstaller=vortex-setup-$rawVersion-installer" >> $env:GITHUB_OUTPUT
          echo "epicBuildString=$rawVersion+$runNumber" >> $env:GITHUB_OUTPUT
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: 'YYYY-MM-DD HHmm'
      - name: Use current time
        env:
          TIME: "${{ steps.current-time.outputs.time }}"
          R_TIME: "${{ steps.current-time.outputs.readableTime }}"
          F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
          YEAR: "${{ steps.current-time.outputs.year }}"
          DAY: "${{ steps.current-time.outputs.day }}"
        run: echo $TIME $R_TIME $F_TIME $YEAR $DAY

      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          
      - name: Download VC_redist
        shell: pwsh
        run: |
          $vcredist = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          Invoke-WebRequest $vcredist -OutFile build\VC_redist.x64.exe

      - name: Download CodeSignTool
        id: codesign
        shell: pwsh
        run: .\download-codesigntool.ps1
          
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: "yarn"

      - name: Install dependencies
        run: yarn --frozen-lockfile --network-timeout 600000 install

      - name: Print debug info
        run: dotnet --info

      - name: Build API
        run: yarn --non-interactive build_api
      
      - name: Build Install
        run: yarn --non-interactive _install_app
      
      - name: Build Subprojects
        run: yarn --non-interactive subprojects_app
      
      - name: Build Assets
        run: yarn --non-interactive _assets_app
        
      - name: Webpack
        run: yarn build_dist
          
      - name: Package
        run: yarn package
        env:
          DEBUG: electron-builder

      - name: Extract Sourcemaps
        run: yarn extract_sourcemaps

      - name: Test
        run: yarn test

      - name: Create Release
        if: inputs.release-draft == true
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.setOutputs.outputs.tagVersion }}
          release_name: ${{ steps.setOutputs.outputs.releaseVersion }}
          draft: true
          prerelease: true
      
      - name: Upload Release Asset
        if: inputs.release-draft == true
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/${{ steps.setOutputs.outputs.artifactNameInstaller }}
          asset_name: ${{ steps.setOutputs.outputs.artifactNameInstaller }}

      - name: Upload Release Asset
        if: inputs.release-draft == true
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/latest.yml
          asset_name: latest.yml

      - name: Deploy to Epic
        if: inputs.deploy-epic == true
        shell: pwsh
        run: |
          echo "steps.setOutputs.outputs.epicBuildString"

      - name: Upload Unpacked
        uses: actions/upload-artifact@v3
        if: inputs.build-unpacked == true
        with:
          name: ${{ steps.setOutputs.outputs.artifactNameUnpacked }}
          path: ./dist/win-unpacked
          if-no-files-found: error

      - name: Upload Installer
        uses: actions/upload-artifact@v3
        if: inputs.build-installer == true
        with:
          name: ${{ steps.setOutputs.outputs.artifactNameInstaller }}
          path: |
            ./dist/vortex-setup-*.*.*.exe
            ./dist/latest.yml
          if-no-files-found: error
